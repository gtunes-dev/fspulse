// fspulse_query.pest
// interactive parser: https://pest.rs/#editor

// Top-level query: one of the domain-specific queries

query = { SOI ~ WS* ~ query_type ~ where_clause? ~ show_clause? ~ order_clause? ~ limit_clause? ~ WS* ~ EOI }

query_type = { "roots" | "scans" | "items" | "changes" }

// Optional WHERE clause
where_clause = _{ WS+ ~ ("WHERE" | "where") ~ WS+ ~ filter_list }
filter_list  = _{ filter ~ (WS* ~ COMMA ~ WS* ~ filter)* }
// TODO: Add int filter
filter = _{ id_filter | date_filter | bool_filter | string_filter | path_filter | val_filter | item_type_filter | change_type_filter | int_filter }

// Optional SHOW clause
show_clause = _{ WS+ ~ ("SHOW" | "show") ~ WS+ ~ show_list }
show_list   =  { show_spec ~ (WS* ~ COMMA ~ WS* ~ show_spec)* }
show_spec   = _{ default | all | id_show | date_show | bool_show | string_show | path_show | val_show | item_type_show | change_type_show | int_show }

// Optional ORDER clause
order_clause = _{ WS+ ~ ("ORDER" | "order") ~ WS+ ~ ("BY" | "by") ~ WS+ ~ order_list }
order_list   =  { order_spec ~ (WS* ~ COMMA ~ WS* ~ order_spec)* }
order_spec   =  { order_column ~ (WS+ ~ order_dir)? }
order_column =  { id_col | date_col | bool_col | string_col | path_col | val_col | item_type_col | change_type_col | int_col }
order_dir    =  { "ASCENDING" | "ascending" | "ASC" | "asc" | "DESCENDING" | "descending" | "DESC" | "desc" }

// Optional LIMIT clause
limit_clause = _{ WS+ ~ limit_text ~ WS+ ~ limit_val }
limit_text   = _{ ^"limit" }
limit_val    =  { ASCII_DIGIT+ }

// Filter verifiers used discretely within code
id_filter_EOI          = { WS* ~ id_filter_values ~ WS* ~ EOI }
date_filter_EOI        = { WS* ~ date_filter_values ~ WS* ~ EOI }
bool_filter_EOI        = { bool_filter_values ~ WS* ~ EOI }
string_filter_EOI      = { string_filter_values ~ WS* ~ EOI }
path_filter_EOI        = { WS* ~ path_filter_values ~ WS* ~ EOI }
val_filter_EOI         = { WS* ~ val_filter_values ~ WS* ~ EOI }
item_type_filter_EOI   = { WS* ~ item_type_filter_values ~ WS* ~ EOI }
change_type_filter_EOI = { WS* ~ change_type_filter_values ~ WS* ~ EOI }
int_filter_EOI         = { WS* ~ int_comparator ~ WS* ~ EOI }

// Identity Columns
id_col = { "root_id" | "scan_id" | "item_id" | "change_id" | "last_scan" | "last_hash_scan_old" | "last_hash_scan" | "last_val_scan_old" | "last_val_scan" }

id_show = { id_col }

id_filter        =  { id_col ~ id_filter_body }
id_filter_body   = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ id_filter_values ~ WS* ~ RPAREN }
id_filter_values = _{ id_spec ~ (WS* ~ COMMA ~ WS* ~ id_spec)* }
id_spec          = _{ null | not_null | id_range | id }
id_range         =  { id ~ WS* ~ DOTDOT ~ WS* ~ id }
id               =  { WS* ~ ASCII_DIGIT+ }

// Date Columns
date_col = { "scan_time" | "mod_date_old" | "mod_date_new" | "mod_date" }

date_show             =  { date_col ~ date_display_modifier? }
date_display_modifier = _{ WS* ~ "@" ~ date_display_mode }
date_display_mode     =  { full | short }

date_filter        =  { date_col ~ date_filter_body }
date_filter_body   = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ date_filter_values ~ WS* ~ RPAREN }
date_filter_values = _{ date_spec ~ (WS* ~ COMMA ~ date_spec)* }
date_spec          = _{ null | not_null | date_range | date }
date_range         =  { date ~ WS* ~ DOTDOT ~ date }
date               =  { WS* ~ ASCII_DIGIT{4} ~ "-" ~ ASCII_DIGIT{2} ~ "-" ~ ASCII_DIGIT{2} }

// Bool Columns
bool_col = { "is_undelete" | "is_hash" | "hash_all" | "is_val" | "val_all" | "hash_change" | "meta_change" | "val_change" | "is_ts" }

bool_show             =  { bool_col ~ bool_display_modifier? }
bool_display_modifier = _{ WS* ~ "@" ~ WS* ~ bool_display_mode }
bool_display_mode     =  { full | short }

bool_filter        =  { bool_col ~ bool_filter_body }
bool_filter_body   = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ bool_filter_values ~ WS* ~ RPAREN }
bool_filter_values = _{ bool ~ (WS* ~ COMMA ~ WS* ~ bool)* }
bool               = _{ null | not_null | bool_true | bool_false }
bool_true          =  { "TRUE" | "true" | "True" | ^"T" }
bool_false         =  { "FALSE" | "false" | "False" | ^"F" }

string_col = { "file_hash" | "val_error_old" | "val_error_new" | "val_error" | "hash_old" | "hash_new" }

string_show = { string_col }

string_filter        =  { string_col ~ string_filter_body }
string_filter_body   = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ string_filter_values ~ WS* ~ RPAREN }
string_filter_values = _{ WS* ~ string_spec ~ (WS* ~ COMMA ~ WS* ~ string_spec)* }
string_spec          = _{ null | not_null | ("'" ~ string ~ "'") }
string               =  { (("\\'" | (!"'" ~ ANY)))* }

// Path Columns
path_col = { "item_path" | "root_path" }

path_show             =  { path_col ~ path_display_modifier? }
path_display_modifier = _{ WS* ~ "@" ~ path_display_mode }
path_display_mode     =  { full | relative | short | name }

path_filter        =  { path_col ~ path_filter_body }
path_filter_body   = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ path_filter_values ~ WS* ~ RPAREN }
path_filter_values = _{ WS* ~ path_spec ~ (WS* ~ COMMA ~ WS* ~ path_spec)* }
path_spec          = _{ "'" ~ path ~ "'" }
path               =  { (("\\'" | (!"'" ~ ANY)))* }

// Val Columns
val_col = { "val_old" | "val_new" | "val" }

val_show             =  { val_col ~ val_display_modifier? }
val_display_modifier = _{ WS* ~ "@" ~ WS* ~ val_display_mode }
val_display_mode     =  { full | short }

val_filter        =  { val_col ~ val_filter_body }
val_filter_body   = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ val_filter_values ~ WS* ~ RPAREN }
val_filter_values = _{ val ~ (WS* ~ COMMA ~ WS* ~ val)* }
val               = _{ null | not_null | val_valid | val_invalid | val_no_validator | val_unknown }
val_valid         =  { "VALID" | "valid" | "Valid" | ^"V" }
val_invalid       =  { "INVALID" | "invalid" | "Invalid" | ^"I" }
val_no_validator  =  { "NO VALIDATOR" | "no validator" | "No Validator" | ^"N" }
val_unknown       =  { "UNKNOWN" | "unknown" | "Unknown" | ^"U" }

// Item Type Columns
item_type_col = { "item_type" }

item_type_show         =  { item_type_col ~ item_type_modifier? }
item_type_modifier     = _{ WS* ~ "@" ~ WS* ~ item_type_display_mode }
item_type_display_mode =  { full | short }

item_type_filter        =  { item_type_col ~ item_type_filter_body }
item_type_filter_body   = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ item_type_filter_values ~ WS* ~ RPAREN }
item_type_filter_values = _{ item_type ~ (WS* ~ COMMA ~ WS* ~ item_type)* }
item_type               = _{ item_file | item_directory | item_symlink }
item_file               =  { "FILE" | "file" | "File" | ^"F" }
item_directory          =  { "DIRECTORY" | "directory" | "Directory" | "DIR" | "dir" | "Dir" | ^"D" }
item_symlink            =  { "SYMLINK" | "symlink" | "Symlink" | ^"S" }

// Change Type Columns
change_type_col = { "change_type" }

change_type_show         =  { change_type_col ~ change_type_modifier? }
change_type_modifier     = _{ WS* ~ "@" ~ WS* ~ change_type_display_mode }
change_type_display_mode =  { full | short }

change_type_filter        =  { change_type_col ~ change_type_filter_body }
change_type_filter_body   = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ change_type_filter_values ~ WS* ~ RPAREN }
change_type_filter_values = _{ change ~ (WS* ~ COMMA ~ WS* ~ change)* }
change                    = _{ null | not_null | change_add | change_modify | change_delete }
change_add                =  { "ADD" | "add" | "Add" | ^"A" }
change_modify             =  { "MODIFY" | "modify" | "Modify" | ^"M" }
change_delete             =  { "DELETE" | "delete" | "Delete" | ^"D" }

// Integer columns
int_col  = { "file_size" | "file_count" | "folder_count" | "adds" | "modifies" | "deletes" | "state" }
int_show = { int_col }

int_filter      =  { int_col ~ int_filter_body }
int_filter_body = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ int_comparator ~ WS* ~ RPAREN }
int_comparator  = _{ (GT | LT) ~ int_val }
int_val         =  { WS* ~ ASCII_DIGIT* }

null     = { "-" | "NULL" | "null" }
not_null = { "not null" | "NOT NULL" }

default = { "default" | "DEFAULT" }
all     = { "all" | "ALL" }

// Format specifiers
short    = _{ "SHORT" | "short" }
full     = _{ "FULL" | "full" }
name     = _{ "NAME" | "name" }
relative = _{ "RELATIVE" | "relative" }

// Basic tokens - all silent
WS     = _{ " " | "\t" | NEWLINE }
COLON  = _{ ":" }
COMMA  = _{ "," }
DOTDOT = _{ ".." }
LPAREN = _{ "(" }
RPAREN = _{ ")" }
GT     =  { ">" }
LT     =  { "<" }
