// fspulse_query.pest
// interactive parser: https://pest.rs/#editor

// Top-level query: one of the domain-specific queries
query = { SOI ~ WS* ~ (roots_query | scans_query | items_query | changes_query) ~ WS* ~ EOI }

roots_query         =  { ^"roots" ~ (WS+ ~ ^"where" ~ WS+ ~ roots_filter_list)? ~ order_clause? ~ limit_clause? }
roots_filter_list   = _{ roots_filter_choice ~ (WS* ~ COMMA ~ WS* ~ roots_filter_choice)* }
roots_filter_choice = _{ root_id_filter | root_path_filter }

scans_query         =  { ^"scans" ~ (WS+ ~ ^"where" ~ WS+ ~ scans_filter_list)? ~ order_clause? ~ limit_clause? }
scans_filter_list   = _{ scans_filter_choice ~ (WS* ~ COMMA ~ WS* ~ scans_filter_choice)* }
scans_filter_choice = _{ scan_id_filter | root_id_filter | scan_time_filter | hashing_filter | validating_filter }

items_query         =  { ^"items" ~ (WS+ ~ ^"where" ~ WS+ ~ items_filter_list)? ~ order_clause? ~ limit_clause? }
items_filter_list   = _{ items_filter_choice ~ (WS* ~ COMMA ~ WS* ~ items_filter_choice)* }
items_filter_choice = _{ item_id_filter | root_id_filter | item_path_filter | last_scan_filter | item_type_filter | mod_date_filter | last_hash_scan_filter | last_val_scan_filter | val_filter }

changes_query         =  { ^"changes" ~ (WS+ ~ ^"where" ~ WS+ ~ changes_filter_list)? ~ order_clause? ~ limit_clause? }
changes_filter_list   = _{ changes_filter_choice ~ (WS* ~ COMMA ~ WS* ~ changes_filter_choice)* }
changes_filter_choice = _{
    change_id_filter
  | root_id_filter
  | scan_id_filter
  | item_id_filter
  | scan_time_filter
  | item_path_filter
  | change_type_filter
  | meta_change_filter
  | mod_date_old_filter
  | mod_date_new_filter
  | val_old_filter
  | val_new_filter
}

show_clause   =  { show_col_spec ~ (WS* ~ COMMA ~ WS* ~ show_col_spec)* }
show_col_spec = _{ (id_show | date_show | bool_show | path_show) }

id_col = { (^"root_id" | ^"scan_id" | ^"item_id" | ^"change_id" | ^"last_scan" | ^"last_hash_scan" | ^"last_val_scan") }

id_show             =  { id_col ~ id_display_modifier? }
id_display_modifier = _{ WS* ~ "@" ~ WS* ~ id_display_mode }
id_display_mode     =  { "nodisplay" }

id_filter        =  { id_col ~ id_filter_body }
id_filter_body   = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ id_filter_values ~ WS* ~ RPAREN }
id_filter_values = _{ id_spec ~ (WS* ~ COMMA ~ WS* ~ id_spec)* }
id_spec          = _{ id_range | id }
id_range         =  { id ~ WS* ~ DOTDOT ~ WS* ~ id }
id               =  { WS* ~ ASCII_DIGIT+ }

date_col = { "scan_time" | "mod_date" | "mod_date_old" | "mod_date_new" }

date_show             =  { date_col ~ date_display_modifier? }
date_display_modifier = _{ WS* ~ "@" ~ date_display_mode }
date_display_mode     =  { ("full" | "short") }

date_filter      =  { date_col ~ date_filter_body }
date_filter_body = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ date_values ~ WS* ~ RPAREN }
date_values      = _{ date_spec ~ (WS* ~ COMMA ~ date_spec)* }
date_spec        = _{ date_range | date }
date_range       =  { date ~ WS* ~ DOTDOT ~ date }
date             =  { WS* ~ ASCII_DIGIT{4} ~ "-" ~ ASCII_DIGIT{2} ~ "-" ~ ASCII_DIGIT{2} }

bool_col = { "hashing" | "validating" }

bool_show             =  { bool_col ~ bool_display_modifier? }
bool_display_modifier = _{ WS* ~ "@" ~ WS* ~ bool_display_mode }
bool_display_mode     =  { ("full" | "short") }

bool_filter = { bool_col ~ bool_filter_body }
bool_filter_body = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ bool_list ~ WS* ~ RPAREN }
bool_list        = _{ bool ~ (WS* ~ COMMA ~ WS* ~ bool)* }
bool             =  { ^"TRUE" | ^"T" | ^"FALSE" | ^"F" }

path_col              =  { "item_path" | "root_path" }

path_show             =  { path_col ~ path_display_modifier? }
path_display_modifier = _{ WS* ~ "@" ~ path_display_mode }
path_display_mode     =  { "full" | "relative" | "shortened" | "name" }

path_filter      =  { path_col ~ path_filter_body }
path_filter_body = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ path_list ~ WS* ~ RPAREN }
path_list        = _{ WS* ~ path_spec ~ (WS* ~ COMMA ~ WS* ~ path_spec)* }
path_spec        = _{ "'" ~ path ~ "'" }
path             =  { (("\\'" | (!"'" ~ ANY)))* }

val_col = { "val_old" | "val_new" | "val" }

val_show = { val_col ~ val_display_modifier? }
val_display_modifier = _{ WS* ~ "@" ~ WS* ~ val_display_mode }
val_display_mode = { "full" | "short" }


// id filters
root_id_filter        = { ^"root_id" ~ id_filter_body }
scan_id_filter        = { ^"scan_id" ~ id_filter_body }
item_id_filter        = { ^"item_id" ~ id_filter_body }
change_id_filter      = { ^"change_id" ~ id_filter_body }
last_scan_filter      = { ^"last_scan" ~ id_filter_body }
last_hash_scan_filter = { ^"last_hash_scan" ~ id_filter_body }
last_val_scan_filter  = { ^"last_val_scan" ~ id_filter_body }

// date filters
scan_time_filter    = { ^"scan_time" ~ date_filter_body }
mod_date_filter     = { ^"mod_date" ~ date_filter_body }
mod_date_old_filter = { ^"mod_date_old" ~ date_filter_body }
mod_date_new_filter = { ^"mod_date_new" ~ date_filter_body }

// path filters - finds items by substring (case insensitive)
root_path_filter = { ^"root_path" ~ path_filter_body }
item_path_filter = { ^"item_path" ~ path_filter_body }

// scan filters - hashing and validating
hashing_filter    = { ^"hashing" ~ bool_filter_body }
validating_filter = { ^"validating" ~ bool_filter_body }

// Validity filter (V, I, N, U) e.g., validity:(V) or validity:(V,I)
val_filter     = { ^"val" ~ val_filter_body }
val_old_filter = { ^"val_old" ~ val_nullable_filter_body }
val_new_filter = { ^"val_new" ~ val_nullable_filter_body }

item_type_filter = { ^"item_type" ~ item_type_filter_body }

// Bool filters
meta_change_filter = { ^"meta_change" ~ bool_nullable_filter_body }

// Change filter: e.g., change:(A) or change:(A,M)
change_type_filter = { ^"change" ~ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ change_type_filter_body ~ WS* ~ RPAREN }

// Optional order clause - column_id validated in code
order_clause = _{ WS+ ~ ^"order" ~ WS+ ~ ^"by" ~ WS+ ~ order_list }
order_list   =  { order_spec ~ (WS* ~ COMMA ~ WS* ~ order_spec)* }
order_spec   =  { column_id ~ (WS+ ~ order_dir)? }
column_id    =  { (('a'..'z') | ('A'..'Z') | "_")+ }
order_dir    =  { ^"ASCENDING" | ^"ASC" | ^"DESCENDING" | ^"DESC" }

// optional limit clause
limit_clause = _{ WS+ ~ limit_text ~ WS+ ~ limit_val }
limit_text   = _{ ^"limit" }
limit_val    =  { ASCII_DIGIT+ }

item_type_filter_body = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ item_type ~ WS* ~ RPAREN }
item_type             =  { ^"FILE" | "F" | ^"DIRECTORY" | "D" }

change_type_filter_body = _{ change ~ (WS* ~ COMMA ~ WS* ~ change)* }
change                  =  { ^"ADD" | ^"A" | ^"DELETE" | ^"D" | ^"MODIFY" | ^"M" }

val_filter_body = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ val_list ~ WS* ~ RPAREN }
val_list        = _{ val ~ (WS* ~ COMMA ~ WS* ~ val)* }
val             =  { ^"VALID" | ^"V" | ^"INVALID" | ^"I" | ^"NO_VALIDATOR" | ^"N" | ^"UNKNOWN" | ^"U" }

val_nullable_filter_body = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ val_nullable_list ~ WS* ~ RPAREN }
val_nullable_list        = _{ val_nullable ~ (WS* ~ COMMA ~ WS* ~ val_nullable)* }
val_nullable             =  { null | val }



bool_nullable_filter_body = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ bool_nullable_list ~ WS* ~ RPAREN }
bool_nullable_list        = _{ bool_nullable ~ (WS* ~ COMMA ~ WS* ~ bool_nullable)* }
bool_nullable             =  { null | bool }

null = { "-" | ^"NULL" }

// Basic tokens - all silent
WS     = _{ " " | "\t" | NEWLINE }
COLON  = _{ ":" }
COMMA  = _{ "," }
DOTDOT = _{ ".." }
LPAREN = _{ "(" }
RPAREN = _{ ")" }
