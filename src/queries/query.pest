// fspulse_query.pest
// interactive parser: https://pest.rs/#editor

// Top-level query: one of the domain-specific queries

query = { SOI ~ WS* ~ query_type ~ where_clause? ~ show_clause? ~ order_clause? ~ limit_clause? ~ WS* ~ EOI }

query_type = { "roots" | "scans" | "items" | "changes" }

// Optional WHERE clause
where_clause = _{ WS+ ~ ("WHERE" | "where") ~ WS+ ~ filter_list }
filter_list  = _{ filter ~ (WS* ~ COMMA ~ WS* ~ filter)* }
filter       = _{ id_filter | date_filter | bool_filter | string_filter | path_filter | val_filter | item_type_filter | change_type_filter }

// Optional SHOW clause
show_clause = _{ WS+ ~ ("SHOW" | "show") ~ WS+ ~ show_list }
show_list   =  { show_spec ~ (WS* ~ COMMA ~ WS* ~ show_spec)* }
show_spec   = _{ default | all | int_show | id_show | date_show | bool_show | string_show | path_show | val_show | item_type_show | change_type_show }

// Optional ORDER clause
order_clause = _{ WS+ ~ ("ORDER" | "order") ~ WS+ ~ ("BY" | "by") ~ WS+ ~ order_list }
order_list   =  { order_spec ~ (WS* ~ COMMA ~ WS* ~ order_spec)* }
order_spec   =  { order_column ~ (WS+ ~ order_dir)? }
order_column =  { id_col | date_col | bool_col | path_col | val_col | item_type_col | change_type_col }
order_dir    =  { "ASCENDING" | "ascending" | "ASC" | "asc" | "DESCENDING" | "descending" | "DESC" | "desc" }

// Optional LIMIT clause
limit_clause = _{ WS+ ~ limit_text ~ WS+ ~ limit_val }
limit_text   = _{ ^"limit" }
limit_val    =  { ASCII_DIGIT+ }

// Identity Columns
id_col = { "root_id" | "scan_id" | "item_id" | "change_id" | "last_scan" | "last_hash_scan" | "last_val_scan" }

id_show             =  { id_col ~ id_display_modifier? }
id_display_modifier = _{ WS* ~ "@" ~ WS* ~ id_display_mode }
id_display_mode     =  { nodisplay }

id_filter        =  { id_col ~ id_filter_body }
id_filter_body   = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ id_filter_values ~ WS* ~ RPAREN }
id_filter_values = _{ id_spec ~ (WS* ~ COMMA ~ WS* ~ id_spec)* }
id_spec          = _{ null | id_range | id }
id_range         =  { id ~ WS* ~ DOTDOT ~ WS* ~ id }
id               =  { WS* ~ ASCII_DIGIT+ }

// Date Columns
date_col = { "scan_time" | "mod_date" | "mod_date_old" | "mod_date_new" }

date_show             =  { date_col ~ date_display_modifier? }
date_display_modifier = _{ WS* ~ "@" ~ date_display_mode }
date_display_mode     =  { full | short | nodisplay }

date_filter      =  { date_col ~ date_filter_body }
date_filter_body = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ date_values ~ WS* ~ RPAREN }
date_values      = _{ date_spec ~ (WS* ~ COMMA ~ date_spec)* }
date_spec        = _{ null | date_range | date }
date_range       =  { date ~ WS* ~ DOTDOT ~ date }
date             =  { WS* ~ ASCII_DIGIT{4} ~ "-" ~ ASCII_DIGIT{2} ~ "-" ~ ASCII_DIGIT{2} }

// Bool Columns
bool_col = { "hashing" | "validating" | "meta_change" }

bool_show             =  { bool_col ~ bool_display_modifier? }
bool_display_modifier = _{ WS* ~ "@" ~ WS* ~ bool_display_mode }
bool_display_mode     =  { full | short | nodisplay }

bool_filter      =  { bool_col ~ bool_filter_body }
bool_filter_body = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ bool_list ~ WS* ~ RPAREN }
bool_list        = _{ bool ~ (WS* ~ COMMA ~ WS* ~ bool)* }
bool             =  { null | "TRUE" | "true" | ^"T" | "FALSE" | "false" | ^"F" }

string_col = { "file_hash" | "val_error" }

string_show = { string_col }

string_filter      =  { string_col ~ string_filter_body }
string_filter_body = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ string_list ~ WS* ~ RPAREN }
string_list        = _{ WS* ~ string_spec ~ (WS* ~ COMMA ~ WS* ~ string_spec)* }
string_spec        = _{ null | ("'" ~ string ~ "'") }
string             =  { (("\\'" | (!"'" ~ ANY)))* }

// Path Columns
path_col = { "item_path" | "root_path" }

path_show             =  { path_col ~ path_display_modifier? }
path_display_modifier = _{ WS* ~ "@" ~ path_display_mode }
path_display_mode     =  { full | relative | short | name | nodisplay }

path_filter      =  { path_col ~ path_filter_body }
path_filter_body = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ path_list ~ WS* ~ RPAREN }
path_list        = _{ WS* ~ path_spec ~ (WS* ~ COMMA ~ WS* ~ path_spec)* }
path_spec        = _{ "'" ~ path ~ "'" }
path             =  { (("\\'" | (!"'" ~ ANY)))* }

// Val Columns
val_col = { "val_old" | "val_new" | "val" }

val_show             =  { val_col ~ val_display_modifier? }
val_display_modifier = _{ WS* ~ "@" ~ WS* ~ val_display_mode }
val_display_mode     =  { full | short | nodisplay }

val_filter      =  { val_col ~ val_filter_body }
val_filter_body = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ val_list ~ WS* ~ RPAREN }
val_list        = _{ val ~ (WS* ~ COMMA ~ WS* ~ val)* }
val             =  { null | "VALID" | "valid" | ^"V" | "INVALID" | "invalid" | ^"I" | "NO_VALIDATOR" | "no_validator" | ^"N" | "UNKNOWN" | "unknown" | ^"U" }

// Item Type Columns
item_type_col = { "item_type" }

item_type_show         =  { item_type_col ~ item_type_modifier? }
item_type_modifier     = _{ WS* ~ "@" ~ WS* ~ item_type_display_mode }
item_type_display_mode =  { full | short | nodisplay }

item_type_filter = { item_type_col ~ item_type_filter_body }

item_type_filter_body = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ item_type ~ WS* ~ RPAREN }
item_type             =  { "FILE" | "file" | ^"F" | "DIRECTORY" | "directory" | "DIR" | "dir" | ^"D" }

// Change Type Columns
change_type_col = { "change_type" }

change_type_show         =  { change_type_col ~ change_type_modifier? }
change_type_modifier     = _{ WS* ~ "@" ~ WS* ~ change_type_display_mode }
change_type_display_mode =  { full | short | nodisplay }

change_type_filter      =  { change_type_col ~ change_type_filter_body }
change_type_filter_body = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ change_list ~ WS* ~ RPAREN }
change_list             = _{ change ~ (WS* ~ COMMA ~ WS* ~ change)* }
change                  =  { null | "ADD" | "add" | ^"A" | "DELETE" | "delete" | ^"D" | "MODIFY" | "modify" | "M" }

// Integer columns
int_col  = { "file_size" | "file_count" | "folder_count" | "adds" | "modifies" | "deletes" }
int_show = { int_col }

null = { "-" | "NULL" | "null" }

default = { "default" | "DEFAULT" }
all     = { "all" | "ALL" }
// Format specifiers
short     = _{ "SHORT" | "short" }
full      = _{ "FULL" | "full" }
name      = _{ "NAME" | "name" }
relative  = _{ "RELATIVE" | "relative" }
nodisplay = _{ "NODISPLAY" | "nodisplay" }

// Basic tokens - all silent
WS     = _{ " " | "\t" | NEWLINE }
COLON  = _{ ":" }
COMMA  = _{ "," }
DOTDOT = _{ ".." }
LPAREN = _{ "(" }
RPAREN = _{ ")" }
