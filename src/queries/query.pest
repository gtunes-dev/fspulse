// fspulse_query.pest
// interactive parser: https://pest.rs/#editor

// Top-level query: one of the domain-specific queries
query = { SOI ~ WS* ~ (roots_query | scans_query | items_query | changes_query) ~ WS* ~ EOI }

roots_query         =  { ^"roots" ~ (WS+ ~ ^"where" ~ WS+ ~ roots_filter_list)? ~ order_clause? ~ limit_clause? }
roots_filter_list   = _{ roots_filter_choice ~ (WS* ~ COMMA ~ WS* ~ roots_filter_choice)* }
roots_filter_choice = _{ root_id_filter | root_path_filter }

scans_query         =  { ^"scans" ~ (WS+ ~ ^"where" ~ WS+ ~ scans_filter_list)? ~ order_clause? ~ limit_clause? }
scans_filter_list   = _{ scans_filter_choice ~ (WS* ~ COMMA ~ WS* ~ scans_filter_choice)* }
scans_filter_choice = _{ scan_id_filter | root_id_filter | scan_time_filter }

items_query         =  { ^"items" ~ (WS+ ~ ^"where" ~ WS+ ~ items_filter_list)? ~ order_clause? ~ limit_clause? }
items_filter_list   = _{ items_filter_choice ~ (WS* ~ COMMA ~ WS* ~ items_filter_choice)* }
items_filter_choice = _{ item_id_filter | root_id_filter | item_path_filter | mod_date_filter | validity_filter }

changes_query         =  { ^"changes" ~ (WS+ ~ ^"where" ~ WS+ ~ changes_filter_list)? ~ order_clause? ~ limit_clause? }
changes_filter_list   = _{ changes_filter_choice ~ (WS* ~ COMMA ~ WS* ~ changes_filter_choice)* }
changes_filter_choice = _{
    change_id_filter
  | root_id_filter
  | scan_id_filter
  | item_id_filter
  | scan_time_filter
  | item_path_filter
  | change_filter
  | mod_date_old_filter
  | mod_date_new_filter
  | validity_filter
}

// id filters
root_id_filter   = { ^"root_id" ~ id_filter_body }
scan_id_filter   = { ^"scan_id" ~ id_filter_body }
item_id_filter   = { ^"item_id" ~ id_filter_body }
change_id_filter = { ^"change_id" ~ id_filter_body }

// date filters
scan_time_filter    = { ^"scan_time" ~ date_filter_body }
mod_date_filter     = { ^"mod_date" ~ date_filter_body }
mod_date_old_filter = { ^"mod_date_old" ~ date_filter_body }
mod_date_new_filter = { ^"mod_date_new" ~ date_filter_body }

// path filters - finds items by substring (case insensitive)
root_path_filter = { ^"root_path" ~ path_filter_body }
item_path_filter = { ^"item_path" ~ path_filter_body }

// Validity filter (V, I, N, U) e.g., validity:(V) or validity:(V,I)
validity_filter = { ^"validity" ~ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ validity_values ~ WS* ~ RPAREN }

// Change filter: e.g., change:(A) or change:(A,M)
change_filter = { ^"change" ~ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ change_values ~ WS* ~ RPAREN }

// Column allowability is implemented in code
// 
// roots : root_id, path
// scans: scan_id
// items:
// changes: change_id, item_id, scan_id
order_clause = _{ WS+ ~ ^"order" ~ WS+ ~ ^"by" ~ WS+ ~ order_list }
order_list   =  { order_spec ~ (WS* ~ COMMA ~ WS* ~ order_spec)* }
order_spec   =  { column_id ~ (WS+ ~ order_dir)? }
order_dir    =  { ^"ASC" | ^"DESC" }
// column_id    =  { ^"change_id" | ^"item_id" | ^"scan_id" | ^"root_id" | ^"id" }
column_id = { (('a'..'z') | ('A'..'Z') | "_")+ }

limit_clause = _{ WS+ ~ limit_text ~ WS+ ~ limit_val }
limit_text   = _{ ^"limit" }
limit_val    =  { ASCII_DIGIT+ }

id_filter_body   = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ id_filter_values ~ WS* ~ RPAREN }
id_filter_values = _{ id_spec ~ (WS* ~ COMMA ~ WS* ~ id_spec)* }
id_spec          = _{ id_range | id }
id_range         =  { id ~ WS* ~ DOTDOT ~ WS* ~ id }
id               =  { WS* ~ ASCII_DIGIT+ }

date_filter_body = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ date_values ~ WS* ~ RPAREN }
date_values      = _{ date_spec ~ (WS* ~ COMMA ~ date_spec)* }
date_spec        = _{ date_range | date }
date_range       =  { date ~ WS* ~ DOTDOT ~ date }
date             =  { WS* ~ ASCII_DIGIT{4} ~ "-" ~ ASCII_DIGIT{2} ~ "-" ~ ASCII_DIGIT{2} }

path_filter_body = _{ WS* ~ COLON ~ WS* ~ LPAREN ~ WS* ~ path_list ~ WS* ~ RPAREN }
path_list        = _{ WS* ~ path_spec ~ (WS* ~ COMMA ~ WS* ~ path_spec)* }
path_spec        = _{ "'" ~ path ~ "'" }
path             =  { (("\\'" | (!"'" ~ ANY)))* }

change_values = _{ change ~ (WS* ~ COMMA ~ WS* ~ change)* }
change        =  { ^"A" | ^"D" | ^"M" }

validity_values = _{ validity ~ (WS* ~ COMMA ~ WS* ~ validity)* }
validity        =  { ^"V" | ^"I" | ^"N" | ^"U" }

// Basic tokens - all silent
WS     = _{ " " | "\t" | NEWLINE }
COLON  = _{ ":" }
COMMA  = _{ "," }
DOTDOT = _{ ".." }
LPAREN = _{ "(" }
RPAREN = _{ ")" }
